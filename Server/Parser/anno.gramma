#include <stdio.h>
#include "Lexer.h"

#include "../Nodes/SOrderNodes.h"
#include "../Terminals/SOrderTerminals.h"
#define BinOp(a,b,c)		new BinaryOperatorExpr((ExprNode*)a, (Terminal*)b, (ExprNode*)c)

/*** Grammar ***

program		-> stmts					{cerr<<"PARSE stmts"<<endl;result = arg0;}

stmts		-> stmt semicolon stmts		{cerr<<"PARSE stmt semicolon stmts"<<endl;((SOrderNodeStmt*)arg0)->setNext((SOrderNodeStmt*)arg2); result = arg0;}
			 | stmt	semicolon			{cerr<<"PARSE stmt"<<endl;result = arg0;}

stmt		-> expr						{cerr<<"PARSE expr"<<endl; result = new SOrderNodeExprStmt((SOrderNodeExpr*)arg0);}
			 | var varDecl				{cerr<<"PARSE var varDecl"<<endl;result = arg1;}
			 
varDecl		-> id 						{cerr<<"PARSE id"<<endl;result = new SOrderNodeVardeclStmt((SOrderIdentifier*)arg0, NULL, NULL);}
			 | id assignment expr		{cerr<<"PARSE id assignment expr"<<endl;result = new SOrderNodeVardeclStmt((SOrderIdentifier*)arg0,(SOrderNodeExpr*)arg2, NULL);}

varexpr		-> id						{cerr<<"PARSE id"<<endl;result = new SOrderNodeVariable((SOrderIdentifier*)arg0);}
			 
argblock	-> left_p args right_p 		{}
			 | left_p right_p			{}

args		-> arg comma args			{}
			 | arg						{}
			 
arg			-> expr						{}

expr		-> int						{cerr<<"PARSE int"<<endl;result = new SOrderNodeLiteralExpr((SOrderIntegerLiteral*)arg0);}
			 | varexpr					{cerr<<"PARSE varexpr"<<endl;result = new SOrderNodeVariableExpr((SOrderNodeVariable*)arg0);}	
			 | varexpr assignment expr	{cerr<<"PARSE varexpr assignment expr"<<endl;result = new SOrderNodeAssignExpr((SOrderNodeVariable*)arg0, (SOrderNodeExpr*)arg2);}	
			 | expr argblock			{}


*/

