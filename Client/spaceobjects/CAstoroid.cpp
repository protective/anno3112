/* 
 * File:   CAstoroid.cpp
 * Author: karsten
 * 
 * Created on 21. oktober 2011, 19:14
 */

#include "CAstoroid.h"
#include "../UI/CUIMainFrame.h"
CAstoroid::CAstoroid(uint32_t id,uint32_t playerId, CPos& pos, CAstoroidType& atype):
CObj(id,playerId,pos),CTargetable(this),CUIBaseFrame((CUIBaseFrame*)mainFrame) {
	this->_astoroidtype = &atype;
	this->_toBeRemoved = false;
}
bool CAstoroid::canBeRemoved(){
	if (this->_toBeRemoved){
		return true;
	}else
		return false;
}

void CAstoroid::Click(SDL_Event event, int32_t x, int32_t y){
	if(Rangeobj((this->_pos.x-viewPos->x)*viewZoom, (this->_pos.y-viewPos->y)*viewZoom,x*100,y*100) <= this->_astoroidtype->getSize()*viewZoom/2){
		if(mainFrame->getsetOrdreUnit() >= 0){
			for(list<CObj*>::iterator it = playerMultiSels.begin(); it != playerMultiSels.end(); it++){
				playerObj->ServerRequestSetOrdreUnit(*it,this, mainFrame->getsetOrdreUnit());
			}
			mainFrame->setsetOrdreUnit(-1);
			return;
		}
	}
}

void CAstoroid::Draw(){
	int32_t uvx1;
	int32_t uvy1;
	uint32_t sheetsize;

			sheetsize = 1024;

		switch (this->_astoroidtype->getTexture()){

		//*****************************************
		//file generated by python spritesheet
		#include "../Textures/obj/cords.txt"

		//**************************************************
			default:{
			glBindTexture( GL_TEXTURE_2D, textures[Textures::ObjSheet]);

			uvx1 = 0;
			uvy1 = 0;
			cerr<<"Warning objsheed tex"<<endl;
			break;
			}
		}


	glBindTexture( GL_TEXTURE_2D, textures[Textures::ObjSheet]);

	glLoadIdentity();
	glTranslated((GLfloat)(((this->_pos.x-viewPos->x)*viewZoom)/100),(GLfloat)(((this->_pos.y-viewPos->y)*viewZoom)/100),0);
	glColor4f(1, 1, 1, 1);
	//glRotatef((GLfloat)(180-(this->_pos.d/100)),0,0,0.1);
	uint32_t tsize = (this->getSize() /2);
	uint32_t tnsize =this->getSize();
	uint32_t tzsize = tsize*viewZoom;
	uint32_t tznsize =tnsize*viewZoom;
		glBegin( GL_QUADS );
		//Bottom-left vertex (corner)
		glTexCoord2f((((double)1)/sheetsize)*(uvx1), (((double)1)/sheetsize)*(uvy1) );
		glVertex3i(-tzsize, -tzsize, 0.0f);

		//Bottom-right vertex (corner)
		glTexCoord2f((((double)1)/sheetsize)*(uvx1+tnsize), (((double)1)/sheetsize)*(uvy1) );
		glVertex3i(tzsize, -tzsize, 0.f);

		//Top-right vertex (corner)
		glTexCoord2f((((double)1)/sheetsize)*(uvx1+tnsize), (((double)1)/sheetsize)*(uvy1+tnsize) );
		glVertex3i(tzsize, tzsize, 0.f);

		//Top-left vertex (corner)
		glTexCoord2f((((double)1)/sheetsize)*(uvx1), (((double)1)/sheetsize)*(uvy1+tnsize) );
		glVertex3i(-tzsize, tzsize, 0.f);
	glEnd();

	glColor4f(1, 1, 1, 1);

}

CAstoroid::~CAstoroid() {
}

